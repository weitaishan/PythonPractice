# *_*coding:utf-8 *_*

'''
题目：列表使用实例。

熟悉列表的方法使用


list主要操作有：索引、切片、查询、删除、插入、追加、、扩展、排序、移除、获取下标、拷贝等等

'''

# 创建列表
# 1、使用list函数
list1 = list("hello")
print(list1)
# 2、创建一个空列表
list2 = []
# 3、创建正常列表
list3 = [3, 78, "hello,world", 61, 11]


# 删除列表元素   del list[index]
del list3[1]
print(list3)  # [3, 'hello,world', 61, 11]


# 改变列表：元素赋值
list4 = [23, 5, 75, 'yes', 99, 'no']
list4[1] = 'ok'
print(list4)   # [23, 'ok', 75, 'yes', 99, 'no']


# 分片赋值
list5 = [44, 8, 'ok', '你好', 99, 'no']
# 1、可以使用与原序列不等长的序列将分片替换
list6 = ['世界', 11]
list5[4:] = list6
print(list5)    #  [44, 8, 'ok', '你好', '世界', 11]
# 2、分片赋值语句可以在不需要替换任何原有元素的情况下插入新的元素
list7 = [44, 8, 'ok', '你好', 99, 'no']
list7[4:4] = ['世界', 88]
print(list7)    # [44, 8, 'ok', '你好', '世界', 88, 99, 'no']    替换了一个空的分片，实际的操作是插入了一个序列，所以说通过分片赋值来删除或是添加元素也是OK的
# 3、利用分片赋值来删除元素（即用一个空的序列来替换分片）
list8 = [44, 8, 'ok', '你好', '世界', 88, 99, 'no']
list8[5:] = []
print(list8)    #  [44, 8, 'ok', '你好', '世界']

# append(element)方法：用于在列表末尾增加新的对象。注意：它不是单纯的返回一个修改过的新列表，而是直接修改原来的列表
list9 = ['你好']
list9.append('世界')
print(list9)   #  ['你好', '世界']


# count(element)方法：统计某个元素在列表中出现的次数
list10 = [12, 3, 12, 45, 9, 12, 1, 2]
print(list10.count(12))    # 3
print(list10.count(0))     # 0


# extend(new_list)方法：在列表的末尾一次性的追加另一个序列中的多个值（即可以用新列表扩展原有的列表）
a = [1, 2, 3, 4]
b = [5, 6, 7]
a.extend(b)
print(a)    #  [1, 2, 3, 4, 5, 6, 7]
#  注意：该方法看起来很像是连接操作，但是两者的主要区别是：extend方法是修改了被扩展的序列，而原始的连接操作是会返回一个全新的列表


# index()方法：用于从列表中找出某个值第一个匹配项的索引位置
list11 = [44, 8, 'ok', '你好', '世界', 88, 99, 'no']
print(list11.index('世界'))    #  4
# print(list11.index(89))       #   ValueError: 89 is not in list


# insert(index,element)方法：用于将对象插入到列表中
list12 = [44, 8, 'ok', '你好', 99, 'no']
list12.insert(4, '世界')
print(list12)     #  [44, 8, 'ok', '你好', '世界', 99, 'no']

# pop()方法：移除列表中的最后一个元素，默认是最后一个，但是也可以指定索引进行元素移除。会返回被移除元素的值。pop方法是唯一一个既能修改列表又返回元素值的列表方法
list13 = [44, 8, 'ok', '你好', '世界', 99, 'no']
print(list13.pop())    # no
print(list13)    #  [44, 8, 'ok', '你好', '世界', 99]
# 指定索引进行元素移除
list13.pop(3)
print(list13)    #  [44, 8, 'ok', '世界', 99]


# remove()方法：用于移除列表中某个值的第一个匹配项。注意：该方法修改了列表但是没有返回值，与pop方法相反
list14 = [44, 8, 'ok', '你好', '世界', 99, '你好']
list14.remove('你好')
print(list14)    #  [44, 8, 'ok', '世界', 99, '你好']


# reverse()方法：将列表中的元素反向存放。 注意：该方法也改变了列表，但没有返回值
list15 = [67, 88, 32, 99]
list15.reverse()
print(list15)    #  [99, 32, 88, 67]


# list.sort(self, key = None, reverse = False)方法。 注意：该方法也改变了原来的列表
'''
因为列表中，可以兼容众多不同数据类型，所以针对不同的数据类型，我们传的key是不同的。如：
针对数字类型排序，我们可以使key = int
针对字符串内容排序，我们可以使key = str
针对字符串的长度排序，我们可以使key = len
默认数字从小到大排列（reverse = false）；当reserve = true时，为从大到小排列
'''
num = [1, 5, 67, 43, 66, 12, 888, 77]
num.sort()
print(num)    #  [1, 5, 12, 43, 66, 67, 77, 888]






